// Generated by Copilot
// Testy jednostkowe dla kontrolera kalkulatora
import { Request, Response } from 'express';
import { Calculator } from '../calculator';
import { calculatorController } from '../controllers/calculator.controller';

// Mock Calculator class
jest.mock('../calculator');

describe('Calculator Controller', () => {
    let mockRequest: Partial<Request>;
    let mockResponse: Partial<Response>;
    let responseObject: any = {};

    beforeEach(() => {
        // Reset mocks
        jest.clearAllMocks();
        
        // Setup response mock
        mockResponse = {
            json: jest.fn().mockImplementation(result => {
                responseObject = result;
                return mockResponse;
            }),
            status: jest.fn().mockReturnThis(),
        };

        // Reset response object
        responseObject = {};
    });

    describe('add', () => {
        it('should add two numbers correctly', () => {
            // Arrange
            mockRequest = {
                body: { a: 5, b: 3 }
            };
            jest.spyOn(Calculator.prototype, 'add').mockReturnValue(8);

            // Act
            calculatorController.add(mockRequest as Request, mockResponse as Response);

            // Assert
            expect(responseObject).toEqual({ result: 8 });
            expect(mockResponse.status).not.toHaveBeenCalled();
        });

        it('should handle invalid input', () => {
            // Arrange
            mockRequest = {
                body: { a: 'invalid', b: 3 }
            };

            // Act
            calculatorController.add(mockRequest as Request, mockResponse as Response);

            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(responseObject).toEqual({ error: 'Invalid input' });
        });
    });

    describe('divide', () => {
        it('should divide two numbers correctly', () => {
            // Arrange
            mockRequest = {
                body: { a: 10, b: 2 }
            };
            jest.spyOn(Calculator.prototype, 'divide').mockReturnValue(5);

            // Act
            calculatorController.divide(mockRequest as Request, mockResponse as Response);

            // Assert
            expect(responseObject).toEqual({ result: 5 });
        });

        it('should handle division by zero', () => {
            // Arrange
            mockRequest = {
                body: { a: 10, b: 0 }
            };
            jest.spyOn(Calculator.prototype, 'divide').mockImplementation(() => {
                throw new Error('Division by zero');
            });

            // Act
            calculatorController.divide(mockRequest as Request, mockResponse as Response);

            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(responseObject).toEqual({ error: 'Division by zero' });
        });
    });

    describe('squareRoot', () => {
        it('should calculate square root correctly', () => {
            // Arrange
            mockRequest = {
                body: { number: 25 }
            };
            jest.spyOn(Calculator.prototype, 'squareRoot').mockReturnValue(5);

            // Act
            calculatorController.squareRoot(mockRequest as Request, mockResponse as Response);

            // Assert
            expect(responseObject).toEqual({ result: 5 });
        });

        it('should handle invalid input', () => {
            // Arrange
            mockRequest = {
                body: { number: -1 }
            };

            // Act
            calculatorController.squareRoot(mockRequest as Request, mockResponse as Response);

            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(responseObject).toEqual({ error: 'Invalid input' });
        });
    });
});
